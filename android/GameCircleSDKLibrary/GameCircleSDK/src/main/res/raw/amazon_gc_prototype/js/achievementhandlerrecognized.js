/*! Copyright 2013 Amazon Digital Services, Inc. All rights reserved. */
AchievementHandlerRecognized=(function(){var a=function(d,c){var f="AchievementRequest";var h=d;var g=c;this["getHandledType"]=function(){return f};this["handleRequest"]=function(k){var q=$.Deferred();if(!(k instanceof Request)){console.log("AchievementHandlerRecognized: handleRequest: input was not of type Request");var r=new Result(constants.NativeCallResultCode.REQUEST_FAILURE,{});q.resolve(r)}else{console.log("AchievementHandlerRecognized: handleRequest: message is: "+JSON.stringify(k.getType()));var m=k.getType();var p=k.getParams();var n=p.action;var i={};switch(n){case"getAchievement":var o=p.cacheOnly;var j=p.achievementId;var l=p.playerId;if(o){g.getCachedAchievement(l,j).always(function(s,t){console.log("AchievementHandlerRecognized: getAchievement promise: "+JSON.stringify(s));var u=t;var v=s;var s=new Result(u,v);q.resolve(s)})}else{h.getAchievement(j,l).always(function(s,t){console.log("AchievementHandlerRecognized: getAchievement promise: "+JSON.stringify(s));if(t!=constants.NativeCallResultCode.SUCCESS){console.log("AchievementHandlerRecognized: getAchievement promise: SERVICE RESULT NOT OK");g.getCachedAchievement(l,j).always(function(w,x){console.log("AchievementHandlerRecognized: getAchievement promise: "+JSON.stringify(w));var y=x;var z=w;var w=new Result(y,z);q.resolve(w)})}else{var u=e(s)?constants.NativeCallResultCode.SUCCESS:constants.NativeCallResultCode.ERROR;var v=s;var s=new Result(u,v);if(u==constants.NativeCallResultCode.SUCCESS){g.cacheAchievement(l,j,v).always(function(w){console.log("UPDATED ACHIEVEMENT CACHE FOR: "+p.achievementId)})}q.resolve(s)}})}break;case"getAchievements":var o=p.cacheOnly;var l=p.playerId;if(o){g.getCachedAchievements(l).always(function(s,t){console.log("AchievementHandlerRecognized: getAchievements promise: "+JSON.stringify(s));var u=t;var v=s;var s=new Result(u,v);q.resolve(s)})}else{h.getAchievements(l).always(function(s,t){console.log("AchievementHandlerRecognized: getAchievements promise: "+JSON.stringify(s));if(t!=constants.NativeCallResultCode.SUCCESS){console.log("AchievementHandlerRecognized: getAchievements promise: SERVICE RESULT NOT OK");g.getCachedAchievements(l).always(function(x,y){console.log("AchievementHandlerRecognized: getAchievements promise: "+JSON.stringify(x));var z=y;var A=x;var x=new Result(z,A);q.resolve(x)})}else{var v=constants.NativeCallResultCode.SUCCESS;var u=s;var w=u;w.serviceResult=true;var s=new Result(v,w);g.cacheAchievements(l,u).always(function(x){console.log("UPDATED ACHIEVEMENTS CACHE")});q.resolve(s)}})}break;case"updateAchievement":g.getCachedAchievement("SELF",p.achievementId).always(function(s,u){console.log("AchievementHandlerRecognized: getAchievement promise: "+JSON.stringify(s));var w=-1;if(u==constants.NativeCallResultCode.SUCCESS){w=s.achievement["playerInfo"]["progress"]}var v=Math.min(p.achievementProgress,100);if(v>w){var t=s;h.updateAchievementProgress(p.achievementId,v).always(function(M,J){if(J!=constants.NativeCallResultCode.SUCCESS){var E={};var z={};z.type="achievementEvent";z.achievementId=p.achievementId;z.progress=p.achievementProgress;z.eventTime=new Date().getTime();E.eventJson=z;NativeTransport.callNative({nativeCall:constants.NativeCallTypes.QUEUE_OFFLINE_EVENT,args:E});b(p.achievementId,p.achievementProgress);if(v<100){M.newlyUnlocked=false}else{M.newlyUnlocked=true}}else{if(e(M)){b(p.achievementId,p.achievementProgress)}}console.log("AchievementHandlerRecognized: updateAchievement promise: "+JSON.stringify(M));var L=constants.NativeCallResultCode.SUCCESS;var B=M;var M=new Result(L,B);g.updateCachedAchievementProgress("SELF",p.achievementId,v).always(function(N,O){console.log("UPDATED ACHIEVEMENTS CACHE")});var F=M.getResultMap();if(!F||!F.achievement){F=t;if(F){if(v<100){F.newlyUnlocked=false}else{F.newlyUnlocked=true}}}if(F&&F.achievement&&F.achievement["achievementMeta"]&&F.newlyUnlocked){var I=F.achievement;var A=I.achievementMeta;var H=A.title;var K=A.description;var G=A.largeIconUrl;var D=A.pointValue;var C=ServiceFactory.getToastFactory().createAchievementToastRequest(H,K,G,D);hostinterface.showToast(JSON.stringify(C))}q.resolve(M)})}else{var x=constants.NativeCallResultCode.SUCCESS;var s={};s.newlyUnlocked=false;var y=s;var s=new Result(x,y);q.resolve(s)}});break;case"clearCache":g.clear().always(function(s,t){console.log("AchievementHandlerRecognized: clearCache promise: "+JSON.stringify(s));var u=t;var v=s;var s=new Result(u,v);q.resolve(s)});break;default:console.log("AchievementHandlerRecognized: handleRequest: actionCode not supported: "+n);var r=new Result(constants.NativeCallResultCode.REQUEST_FAILURE,{});q.resolve(r)}}console.log("AchievementHandlerRecognized: handleRequest: end of call");return q.promise()};function e(i){return(i!==undefined&&i!==null&&i.resultCodes!==undefined&&i.resultCodes!==null&&i.resultCodes.errorCode==="OK"&&i.resultCodes.resultCode==="OK")}function b(k,i){var j=new GameCircleEvent("PostAchievementInfo");j.addAttribute(constants.MetricConstants.MetricStringValueAttributesKeys_TARGET_ID,k);j.addAttribute(constants.MetricConstants.MetricStringValueAttributesKeys_STATUS,i);j.close()}};return a}());console.log("AchievementHandlerRecognized loaded.");